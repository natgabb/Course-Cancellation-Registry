#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourseCancellationRegistry
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="0932340")]
	public partial class TablesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCourseTime(CourseTime instance);
    partial void UpdateCourseTime(CourseTime instance);
    partial void DeleteCourseTime(CourseTime instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudentCourse(StudentCourse instance);
    partial void UpdateStudentCourse(StudentCourse instance);
    partial void DeleteStudentCourse(StudentCourse instance);
    partial void InsertCourseCancelled(CourseCancelled instance);
    partial void UpdateCourseCancelled(CourseCancelled instance);
    partial void DeleteCourseCancelled(CourseCancelled instance);
    #endregion
		
		public TablesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["_0932340ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CourseTime> CourseTimes
		{
			get
			{
				return this.GetTable<CourseTime>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<StudentCourse> StudentCourses
		{
			get
			{
				return this.GetTable<StudentCourse>();
			}
		}
		
		public System.Data.Linq.Table<CourseCancelled> CourseCancelleds
		{
			get
			{
				return this.GetTable<CourseCancelled>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseTimes")]
	public partial class CourseTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseTimesID;
		
		private string _CourseID;
		
		private System.Nullable<int> _Start;
		
		private System.Nullable<int> _End;
		
		private System.Nullable<int> _DayOfWeek;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseTimesIDChanging(int value);
    partial void OnCourseTimesIDChanged();
    partial void OnCourseIDChanging(string value);
    partial void OnCourseIDChanged();
    partial void OnStartChanging(System.Nullable<int> value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.Nullable<int> value);
    partial void OnEndChanged();
    partial void OnDayOfWeekChanging(System.Nullable<int> value);
    partial void OnDayOfWeekChanged();
    #endregion
		
		public CourseTime()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTimesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseTimesID
		{
			get
			{
				return this._CourseTimesID;
			}
			set
			{
				if ((this._CourseTimesID != value))
				{
					this.OnCourseTimesIDChanging(value);
					this.SendPropertyChanging();
					this._CourseTimesID = value;
					this.SendPropertyChanged("CourseTimesID");
					this.OnCourseTimesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="Int")]
		public System.Nullable<int> Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[End]", Storage="_End", DbType="Int")]
		public System.Nullable<int> End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="Int")]
		public System.Nullable<int> DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseTime", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseTimes.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseTimes.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CourseID;
		
		private string _Title;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _Session;
		
		private EntitySet<CourseTime> _CourseTimes;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(string value);
    partial void OnCourseIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnSessionChanging(System.Nullable<int> value);
    partial void OnSessionChanged();
    #endregion
		
		public Course()
		{
			this._CourseTimes = new EntitySet<CourseTime>(new Action<CourseTime>(this.attach_CourseTimes), new Action<CourseTime>(this.detach_CourseTimes));
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(65)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Session", DbType="Int")]
		public System.Nullable<int> Session
		{
			get
			{
				return this._Session;
			}
			set
			{
				if ((this._Session != value))
				{
					this.OnSessionChanging(value);
					this.SendPropertyChanging();
					this._Session = value;
					this.SendPropertyChanged("Session");
					this.OnSessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseTime", Storage="_CourseTimes", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<CourseTime> CourseTimes
		{
			get
			{
				return this._CourseTimes;
			}
			set
			{
				this._CourseTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourse", Storage="_StudentCourses", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseTimes(CourseTime entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseTimes(CourseTime entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private string _Email;
		
		private EntityRef<Student> _Student2;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntityRef<Student> _Student1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Student()
		{
			this._Student2 = default(EntityRef<Student>);
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._Student1 = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student", Storage="_Student2", ThisKey="StudentID", OtherKey="StudentID", IsUnique=true, IsForeignKey=false)]
		public Student Student2
		{
			get
			{
				return this._Student2.Entity;
			}
			set
			{
				Student previousValue = this._Student2.Entity;
				if (((previousValue != value) 
							|| (this._Student2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student2.Entity = null;
						previousValue.Student1 = null;
					}
					this._Student2.Entity = value;
					if ((value != null))
					{
						value.Student1 = this;
					}
					this.SendPropertyChanged("Student2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourse", Storage="_StudentCourses", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student", Storage="_Student1", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student1
		{
			get
			{
				return this._Student1.Entity;
			}
			set
			{
				Student previousValue = this._Student1.Entity;
				if (((previousValue != value) 
							|| (this._Student1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student1.Entity = null;
						previousValue.Student2 = null;
					}
					this._Student1.Entity = value;
					if ((value != null))
					{
						value.Student2 = this;
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentCourse")]
	public partial class StudentCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudCourseID;
		
		private int _StudentID;
		
		private string _CourseID;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudCourseIDChanging(int value);
    partial void OnStudCourseIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnCourseIDChanging(string value);
    partial void OnCourseIDChanged();
    #endregion
		
		public StudentCourse()
		{
			this._Student = default(EntityRef<Student>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudCourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudCourseID
		{
			get
			{
				return this._StudCourseID;
			}
			set
			{
				if ((this._StudCourseID != value))
				{
					this.OnStudCourseIDChanging(value);
					this.SendPropertyChanging();
					this._StudCourseID = value;
					this.SendPropertyChanged("StudCourseID");
					this.OnStudCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="VarChar(20)")]
		public string CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourse", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourse", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseCancelled")]
	public partial class CourseCancelled : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseCancelledID;
		
		private string _CourseID;
		
		private string _DateCancelled;
		
		private string _Teacher;
		
		private string _Notes;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseCancelledIDChanging(int value);
    partial void OnCourseCancelledIDChanged();
    partial void OnCourseIDChanging(string value);
    partial void OnCourseIDChanged();
    partial void OnDateCancelledChanging(string value);
    partial void OnDateCancelledChanged();
    partial void OnTeacherChanging(string value);
    partial void OnTeacherChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public CourseCancelled()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseCancelledID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseCancelledID
		{
			get
			{
				return this._CourseCancelledID;
			}
			set
			{
				if ((this._CourseCancelledID != value))
				{
					this.OnCourseCancelledIDChanging(value);
					this.SendPropertyChanging();
					this._CourseCancelledID = value;
					this.SendPropertyChanged("CourseCancelledID");
					this.OnCourseCancelledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCancelled", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string DateCancelled
		{
			get
			{
				return this._DateCancelled;
			}
			set
			{
				if ((this._DateCancelled != value))
				{
					this.OnDateCancelledChanging(value);
					this.SendPropertyChanging();
					this._DateCancelled = value;
					this.SendPropertyChanged("DateCancelled");
					this.OnDateCancelledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teacher", DbType="VarChar(50)")]
		public string Teacher
		{
			get
			{
				return this._Teacher;
			}
			set
			{
				if ((this._Teacher != value))
				{
					this.OnTeacherChanging(value);
					this.SendPropertyChanging();
					this._Teacher = value;
					this.SendPropertyChanged("Teacher");
					this.OnTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(200)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(65)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
